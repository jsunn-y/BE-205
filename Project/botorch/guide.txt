DK-BO (botorch compatible) Guide:

Experiments: (run_botorch.py)
Choose an objective function (either botorch, or implement your own in objectives.py).
Set relevant params: budget, function bounds, acquisition params (e.g. beta for UCB)...
Set path to save directory.
Set number of runs of each experiment (usually 1, but can do more if space) as well as index (corresponds to random seed so same are used across experiments).
Create a process for each experiment variation you want to run. For each process, you should define: model type (GP or DKL), kernel type, acquisition function, architecture (if DKL), (MC)dropout rate (if DKL).
From cmd line, simply run "python run_botorch.py", with nohup modifiers recommended.

To modify and extend:

Acquisition functions: (acquisition.py)
Add a string identifier: function handle to acq_optimize_discrete() acq_dict.
Define acquisition function according to API: 
#   Inputs: X (all possible candidates), samp_x, samp_y, gp model, OPT: xi (extra constant), batch size
#   Outputs: acq fn value on all points in X.
OR create a wrapper for Botorch acq. fn (see examples).

Models (models.py, networks.py)
Models are composed in BaseModel init() method.
Define new components in networks.py (e.g. GP, DKL, GNN, etc.) or elsewhere (e.g. nts.py, turbo.py).

Objectives (objectives.py, run.py)
Either define a new objective fn (e.g. accessing a tensor file) in objectives.py
OR define a botorch objective in run.py. Though you can wrap botorch objectives too.


